/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        combos {
                compatible = "zmk,combos";
                combo_esc {
                timeout-ms = <50>;
                key-positions = <0 1>;
                bindings = <&kp ESC>;
                };
                
                combo_adjust {
                timeout-ms = <50>;
                key-positions = <38 40>;
                bindings = <&mo 4>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
                        &kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T      &kp Y      &kp U      &kp I       &kp O       &kp P       &kp BKSP
                        &mo 1      &kp A      &kp S     &kp D     &kp F      &kp G      &kp H      &kp J      &kp K       &kp L       &kp SEMI    &kp RET
                        &kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B      &kp N      &kp M      &kp CMMA    &kp DOT     &kp SLASH   &kp RSHFT 
                                                          &kp LALT  &kp LGUI  &mo 3    &kp SPACE       &mo 2      &kp RCTRL
                        >;
                };

                        nav_layer {
                        bindings = <    
                        &trans      &kp C_BRI_DN &kp C_BRI_UP &trans    &trans     &kp C_PREV &kp C_PP   &kp C_NEXT &kp UP   &kp C_MUTE  &kp C_VOL_DN &kp C_VOL_UP
                        &trans      &trans       &trans       &trans    &trans     &trans     &trans     &kp LEFT   &kp DOWN &kp RIGHT   &trans       &trans
                        &trans      &trans       &trans       &trans    &trans     &trans     &trans     &trans     &trans   &trans      &trans       &trans
                                                          &trans     &trans    &trans   &trans     &trans    &trans
                        >;
                };

                        programmer_layer {
                        bindings = <
                        &kp GRAVE   &trans     &trans    &trans    &trans     &trans     &kp DQT    &kp LPAR   &kp RPAR    &trans      &kp MINUS   &kp EQUAL
                        &trans      &trans     &trans    &trans    &trans     &trans     &kp SQT    &kp LBRC   &kp RBRC    &trans      &trans      &kp BSLH
                        &trans      &trans     &trans    &trans    &trans     &trans     &trans     &kp LBKT   &kp RBKT    &trans      &trans      &trans
                                                          &trans      &trans     &trans        &trans     &trans      &trans
                        >;
                };

                        num_layer {
                        bindings = <
                        &trans      &kp N1     &kp N2    &kp N3    &kp N4     &kp N5     &kp N6     &kp N7     &kp N8      &kp N9      &kp N0      &trans
                        &trans      &trans     &trans    &trans    &trans     &trans     &trans     &trans     &trans      &trans      &trans      &trans
                        &trans      &trans     &trans    &trans    &trans     &trans     &trans     &trans     &trans      &trans      &trans      &trans
                                                          &bt BT_CLR  &bt BT_PRV   &bt BT_NXT        &trans     &trans      &trans
                        >;
                };
                        
                        adjust_layer {
                        bindings = <
                        &trans      &kp EXCL   &kp AT    &kp HASH  &kp DLLR   &kp PRCNT  &kp CARET  &kp AMPS   &kp ASTRK   &kp LPAR    &kp RPAR    &trans
                        &trans      &trans     &trans    &trans    &trans     &trans     &trans     &trans     &trans      &trans      &trans      &trans
                        &trans      &trans     &trans    &trans    &trans     &trans     &trans     &trans     &trans      &trans      &trans      &trans
                                                          &trans      &trans     &trans        &trans     &trans      &trans
                        >;
                };

                
        };
};
